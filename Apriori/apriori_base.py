# -*- coding: utf-8 -*-
"""Apriori-Base.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hI0Mfo_DfGWyZXxt98zPfkA1NwxBdEyX
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

df = pd.read_csv("/content/sample_data/bread basket.csv")

df.head()

df.describe()

df.info()

"""There is no missing value.

## **Apriori Algorithm**

Apriori algorithm assumes that any subset of a frequent itemset must be frequent.The value of “frequent itemset” > than a threshold value(i.e. support).Name of the algorithm is Apriori because it uses prior knowledge of frequent itemset properties. We apply an iterative approach or level-wise search where k-frequent itemsets are used to find k+1 itemsets.
"""

from mlxtend.frequent_patterns import association_rules, apriori

transactions_s = df.groupby(['Transaction', 'Item'])['Item'].count().reset_index(name ='Count')
transactions_s

my_baskets = transactions_s.pivot_table(index='Transaction', columns='Item', values='Count', aggfunc='sum').fillna(0)
my_baskets.head()

"""Making a function which returns 0 or 1.
0 means item was not in that transaction, 1 means item present in that transaction
"""

def encode(x):
    if x<=0:
        return 0
    if x>=1:
        return 1

"""Applying the function to the dataset"""

my_baskets_sets = my_baskets.applymap(encode)
my_baskets_sets.head()

"""Using the 'apriori algorithm' with min_support=0.01 (1% of 9465)
It means the item should be present in atleast 94 transaction out of 9465 transactions only when we considered that item in
"""

frequent_item = apriori(my_baskets_sets, min_support = 0.01,use_colnames = True)
frequent_item

"""Now making the rules from frequent itemset generated above"""

rule = association_rules(frequent_item, metric = "lift", min_threshold = 1)
rule.sort_values('confidence', ascending=False)

plt.scatter(rule['support'], rule['confidence'], alpha=0.5)
plt.xlabel('support')
plt.ylabel('confidence')
plt.title('Support vs Confidence')
plt.show()

plt.scatter(rule['support'], rule['lift'], alpha=0.5)
plt.xlabel('support')
plt.ylabel('lift')
plt.title('Support vs Lift')
plt.show()

fit = np.polyfit(rule['lift'], rule['confidence'], 1)
fit_fn = np.poly1d(fit)
plt.plot(rule['lift'], rule['confidence'], 'yo', rule['lift'], 
fit_fn(rule['lift']))

from collections import defaultdict
refHash = defaultdict(list)

for i,id in enumerate(df['Transaction'].values):
    refHash[id] += [df.loc[i,'Item']]

lst = list(refHash.values())

!pip install apyori

from apyori import apriori
rule = apriori(transactions= lst, min_support = 0.002, min_lift = 3)
results = list(rule)
results

def inspect(results):
    lhs         = [tuple(result[2][0][0])[0] for result in results]
    rhs         = [tuple(result[2][0][1])[0] for result in results]
    supports    = [result[1] for result in results]
    confidences = [result[2][0][2] for result in results]
    lifts       = [result[2][0][3] for result in results]
    return list(zip(lhs, rhs, supports, confidences, lifts))
resultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])

resultsinDataFrame

"""### Displaying the top ten items having the highest lift."""

resultsinDataFrame.nlargest(10, 'Lift')